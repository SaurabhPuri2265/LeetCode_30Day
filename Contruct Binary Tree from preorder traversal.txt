Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        if(preorder.length==0)return null;
        int i=0,j=preorder.length-1;
        return Helper(preorder,i,j);
    }
    
    public TreeNode Helper(int[] preorder,int i,int k){
        if(i>k)
            return null;
        TreeNode root=new TreeNode(preorder[i]);
        int j=0;
        for(j=i+1;j<preorder.length;j++){
            if(preorder[j]>preorder[i])
                break;
        }
        
        root.left=Helper(preorder,i+1,j-1);
        root.right=Helper(preorder,j,k);
        return root;
    }
}
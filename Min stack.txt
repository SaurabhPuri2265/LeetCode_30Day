 Min Stack

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.

Solution-
class MinStack {
    Stack<Integer> min;
    Stack<Integer> stack;
    /** initialize your data structure here. */
    public MinStack() {
        this.stack = new Stack<Integer>();
        this.min=new Stack<>();
       // int min=-1;
    }
    
    public void push(int x) {
        if(stack.empty())
        {
            stack.push(x);
            min.push(x);
        }
        else
        {
            if(x<=min.peek())
            {
                min.push(x);
            }
            
            stack.push(x);
        }
        
        
    }
    
    public void pop() {
        
        
        if(!stack.empty())
        {
          int y=stack.pop();
          if(y==min.peek())
             min.pop();        
        }
        
        
        
    }
    
    public int top() {
        
        if(!stack.empty())
            return stack.peek();
        
        return -1;
    }
    
    public int getMin() {
        if(!min.empty())
            return min.peek();
        return -1;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:

Si % Sj = 0 or Sj % Si = 0.

If there are multiple solutions, return any subset is fine.

Example 1:

Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)

Example 2:

Input: [1,2,4,8]
Output: [1,2,4,8]

--------------------------------------------------------------------------------------------------------------------------

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        
        List<Integer> res=new ArrayList<>();
        
        if(nums.length==0)
            return res;
        
        int[] dp=new int[nums.length];
        
        Arrays.sort(nums);
        
        Arrays.fill(dp,1);
        
        int max=0;
        
        for(int i=1;i<nums.length;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]%nums[j]==0)
                    dp[i]=Math.max(dp[i],dp[j]+1);
            }
            
            if(dp[max]<dp[i])
                max=i;
        }
        
        max=dp[max];
        
        int val=1;
        int i=0;
        while(i<nums.length && val<=max)
        {
            if(dp[i]==val)
            {
                res.add(nums[i]);
                val++;
            }
            i++;
        }
        
        return res;
    }
}
There are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.

Now given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.

Example 1:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1

----------------------------------------------------------------------------------------------------------------------------


class Solution {
    List<List<int[]>> graph=new ArrayList<>();
    
    //BFS using priority queue
    //keeping on getting the min distance value after addinh=g in the queue and 
    //keep checking that distance does not exceed k
    
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        
        for(int i=0;i<n;i++)
            graph.add(new ArrayList<>());
        
        for(int[] flight:flights)
            graph.get(flight[0]).add(new int[]{flight[1],flight[2]});
        
        PriorityQueue<int[]> q=new PriorityQueue<>((a,b) -> a[2]-b[2]);
        
        q.add(new int[]{src,0,0});
        
        while(!q.isEmpty())
        {
            int[] curr=q.remove();
            int city=curr[0];
            int distance=curr[1];
            int cost=curr[2];
            
            if(city==dst)
                return cost;
            
            if(distance<=K)
              for(int[] point:graph.get(city))
                  q.add(new int[]{point[0],distance+1,cost+point[1]});
            
        }
        return -1;
    }
}
There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].

Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.

 

Example 1:

Input: [[10,20],[30,200],[400,50],[30,20]]
Output: 110
Explanation: 
The first person goes to city A for a cost of 10.
The second person goes to city A for a cost of 30.
The third person goes to city B for a cost of 50.
The fourth person goes to city B for a cost of 20.

The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.

------------------------------------------------------------------------------------------------------------------

class Solution {
    public int twoCitySchedCost(int[][] costs) {
        
        Arrays.sort(costs,(a,b) -> (a[0]-a[1])-(b[0]-b[1]));
        
        int res=0;
        
        for(int i=0;i<costs.length;i++)
        {
            if(i<costs.length/2)
                res+=costs[i][0];
            else
                res+=costs[i][1];
        }
        return res;
    }
}

/*
Explanations:

We want to select N persons to go to the A city and the other N persons to go to the B city in a way that leads to the minimum cost.
Ideally, we would like to send the first N persons to the A city (by selecting "costs[i][0]"), and the second N persons to the B city (by selecting "costs[j][1]"). If this does not work, we should sort the "nums", but how should be do this?
We need to sort the "nums" based on the difference between "costs[i][0] - costs[i][1]". This will garantee that the costs[i][0] is small for the first half, and costs[j][1] is small for the second half.
Afterward, the minumum cost is the sum of costs[i][0] for the first half + the sum of costs[j][1] for the second half.
Example:
Consider this input:

[[10,20],[30,200],[400,50],[30,20]]
after sorting, it will become:

[[30, 200], [10, 20], [30, 20], [400, 50]]
which means that the differene between costs[i][0] and costs[i][1] is now sorted:

-170
-10
10
350
Now, the minimum cost can be calculated as:

30 + 10 + 20 + 50 = 110

*/
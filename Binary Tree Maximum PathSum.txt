Binary Tree Maximum Path Sum
Solution
Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
     int max=Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        
        if(root==null)
            return 0;
        
       
        int sum=0;
        Helper(root);
        return max;
    }
    
    public int Helper(TreeNode root){
        
        if(root==null)return 0;
        
        int lsum=Helper(root.left);
        int rsum=Helper(root.right);
        
        max=Math.max(max,root.val+lsum+rsum);
        
        return Math.max(0,Math.max(lsum+root.val,rsum+root.val)) ;
        
    }
}
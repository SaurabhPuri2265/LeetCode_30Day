You have a queue of integers, you need to retrieve the first unique integer in the queue.

Implement the FirstUnique class:

FirstUnique(int[] nums) Initializes the object with the numbers in the queue.
int showFirstUnique() returns the value of the first unique integer of the queue, and returns -1 if there is no such integer.
void add(int value) insert value to the queue.


class FirstUnique {
    Queue<Integer> q=new LinkedList<>();
    HashMap<Integer,Integer> map=new HashMap<>();

    public FirstUnique(int[] nums) {
        for(int i=0;i<nums.length;i++){
            add(nums[i]);
        }
    }
    
    public int showFirstUnique() {
        if(q.isEmpty())return -1;
        int size=q.size();
        
        while(size>0)
        {
            if(map.get(q.peek())==1)
                return q.peek();
            size--;
            q.remove();
        }
        return -1;
        
    }
    
    public void add(int value) {
        q.add(value);
        if(!map.containsKey(value))
            map.put(value,1);
        else
            map.replace(value,map.get(value)+1);
        
    }
}

/**
 * Your FirstUnique object will be instantiated and called as such:
 * FirstUnique obj = new FirstUnique(nums);
 * int param_1 = obj.showFirstUnique();
 * obj.add(value);
 */
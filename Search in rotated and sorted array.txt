Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

class Solution {
    public int search(int[] nums, int target) {
        
        int low=0,high=nums.length-1;
        
       return  Helper(nums,target,low,high);
             
    }
    
    
    public int Helper(int[] nums,int target,int low,int high){
        
        if(low>high)return -1;
        
        int mid=(low+high)/2;
        
        if(nums[mid]==target)
            return mid;
        
        
       if(nums[low]<=nums[mid])
       {
           if(nums[low]<=target && nums[mid]>=target)
               return Helper(nums,target,low,mid-1);
           else
               return Helper(nums,target,mid+1,high);
       }
       else
       {
           if(nums[mid]<=target && nums[high]>=target)
               return Helper(nums,target,mid+1,high);
               
       }
        return Helper(nums,target,low,mid-1);
    }
}
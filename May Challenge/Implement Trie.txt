Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

class Trie {
    
    Node root;
    /** Initialize your data structure here. */
    public Trie() {
        root=new Node();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        
        Node temp=root;
        for(char c:word.toCharArray()){
            temp.putChildIfAbsent(c);
            temp=temp.getChild(c);
        }
        temp.isEnd=true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node temp=root;
        for(char c:word.toCharArray()){
            if(temp.getChild(c)==null)
                return false;
            temp=temp.getChild(c);
        }
        
        return temp.isEnd==true;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
         Node temp=root;
        for(char c:prefix.toCharArray()){
            if(temp.getChild(c)==null)
                return false;
            temp=temp.getChild(c);
        }
        
        return true;
    }
}



class Node{
    HashMap<Character,Node> children=new HashMap<>();
    boolean isEnd=false;
    
     public void putChildIfAbsent(char ch) {
        children.putIfAbsent(ch, new Node());
    }

    public Node getChild(char ch) {
        return children.get(ch);
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
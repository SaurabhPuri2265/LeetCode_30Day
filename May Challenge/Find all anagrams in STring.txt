Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".


class Solution {
    public List<Integer> findAnagrams(String s, String p) {
       
        //Using Sliding window concept
        
        List<Integer> list=new ArrayList<>(); 
        
         if(s.length()==0 || (s.length()<p.length()))
            return list;
        
        //Initialise two arrays of const size for maintaing frequencies of alphabets
        int m=p.length();
        int n=s.length();
        int[] pi=new int[26];
        int[] si=new int[26];
        
        //Iterating over p and adjusting the frequencies of alphabets
        
        for(int i=0;i<m;i++){
            si[s.charAt(i)-'a']++;
            pi[p.charAt(i)-'a']++;
        }
        
        //Sliding window concept starts check for i and remove left most element by manipulating frequencies.
        int i=0;
        for( i=m;i<n;i++){
            if(compare(si,pi)==true)
                list.add(i-m);
            si[s.charAt(i)-'a']++;
            si[s.charAt(i-m)-'a']--;
        }
        if(compare(si,pi)==true)
            list.add(i-m);

        return list; 
        
        
    }
    
    public boolean compare(int[] a,int[] b)
    {
        for(int i=0;i<a.length;i++)
            if(a[i]!=b[i])
                return false;
        
        return true;
    }
}
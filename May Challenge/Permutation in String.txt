Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Note:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].



class Solution {
    public boolean checkInclusion(String s1, String s2) {
        
        if(s1.length()>s2.length())return false;
        
        int[] count1=new int[26];
        int[] count2=new int[26];
        
        for(int i=0;i<s1.length();i++)
        {
            count1[s1.charAt(i)-'a']++;
            count2[s2.charAt(i)-'a']++;
        }
        
        int m=s1.length();
        int n=s2.length();
        
        for(int i=m;i<=n;i++){
            
            if(compare(count1,count2))
                return true;
           if(i<n) 
           {
            count2[s2.charAt(i)-'a']++;
            count2[s2.charAt(i-m)-'a']--;
           }
        }
        if(compare(count1,count2))
                return true;
        
        return false;
        
    }
    
    public boolean compare(int[] arr1,int[] arr2){
        for(int i=0;i<26;i++)
            if(arr1[i]!=arr2[i])
                return false;
        
        return true;
    }
}
In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        int count=0;
        Triplet c1=null,c2=null;
        boolean flag=false;
        
        Queue<Triplet> q=new LinkedList<>();
        
        q.add(new Triplet(null,root,0));
        
        while(q.size()>0){
            int size=q.size();
            while(size>0){
                Triplet temp=q.remove();
                if(temp.child.val==x)
                {
                    count++;
                    c1=temp;
                }
                else if(temp.child.val==y)
                {
                    count++;
                    c2=temp;
                }
                if(count==2)
                {
                    flag=true;
                    break;
                }
                
                if(temp.child.left!=null)
                    q.add(new Triplet(temp.child,temp.child.left,temp.level+1));
                
                
                if(temp.child.right!=null)
                    q.add(new Triplet(temp.child,temp.child.right,temp.level+1));
                
                size--;
                
            }
            if(flag==true)
                break;
            
        }
        if(c1!=null && c2!=null)
        System.out.println(c1.child+":"+c2.child);
        if(count==2)
        {
            if(c1.level!=c2.level)return false;
            else if (c1.parent==c2.parent)return false;
        }
        
        return true;
        
    }
    
    class Triplet{
        TreeNode parent;
        TreeNode child;
        int level;
        Triplet(TreeNode parent,TreeNode child,int level){
            this.parent=parent;
            this.child=child;
            this.level=level;
        }
    }
}